=======
Objects
=======

Creation
--------

Inventory can be created in two different ways:

One by one
**********

From the :guilabel:`Inventory / Device Management` page and :guilabel:`Inventory / Link Management` page, by entering the value of each property in a form.
Clicking on the ``Create`` button will open a form with the list of all properties of the object.
Fill the form and click on the ``Save`` button.

All at once
***********

From the :guilabel:`Admin / Administration` page by importing an Excel file (.xls, .xlsx), objects can be created all at once by importing an Excel file.

.. image:: /_static/inventory/import_export/import_export.png
   :alt: Example of excel spreadsheet for import
   :align: center

Devices must be defined in a spreadsheet in a Tab called "Device", and links must be defined in a Tab called "Link".
The first line of a spreadsheet contains the properties, the following lines define the objects, as demonstrated in the example below.

.. image:: /_static/inventory/import_export/inventory_spreadsheet.png
   :alt: Example of excel spreadsheet for import
   :align: center

.. note:: You can export the existing data, you can export an Excel spreadsheet containing all the object data by clicking on the ``Export`` button in the ``Topology Export`` column.
.. note:: If an imported object already exists, its properties will be updated.
.. note:: eNMS currently has no way to check the spreadsheet import for valid data, nor duplicates. It is important to pass good data to eNMS.

Creation via external API
*************************

Another way to create your network is to query an external API: OpenNMS, Netbox, or LibreNMS.
This can be done from the :guilabel:`Admin / Administration` page, column "Topology Import".

OpenNMS
-------

You can configure the following properties for OpenNMS:
 * ReST API: URL of the ReST API
 * Devices: URL of the devices that you want to import (this could be a subset of all available devices in the API, like ``https://demo.opennms.org/opennms/rest/nodes?foreignSource=OpenNMS_ATL``)
 * Login & Password: credentials of the ReST API.

Netbox
------

You can configure the following properties for OpenNMS:
 * Netbox Address: address of the server where Netbox is installed.
 * Netbox Token: token required by Netbox to use the API. This token is generated by Netbox.

LibreNMS
--------

You can configure the following properties for LibreNMS:
 * LibreNMS Address: address of the server where LibreNMS is installed.
 * LibreNMS Token: token required by LibreNMS to use the API (generated by LibreNMS).

Properties
----------

Some properties are mandatory:
 * Name: objects are uniquely defined by their name.
 * Source and destination: a link needs a source and a destination to be created.

.. tip:: In order to visualize the network topology on a map, devices must have geographical coordinates (longitude and latitude).

Custom properties
-----------------

It is possible to add custom properties to a device.
There are four types of properties that you can add: string, integer, float, and boolean.

Custom properties are read from a YAML file when eNMS starts.
The YAML file must have the following format:

::

 property1:
   pretty_name: Property 1
   type: integer
   default: 4
   add_to_dashboard: False
 property2:
   pretty_name: Property 2
   type: string
   default: "10.145.14.1"
   add_to_dashboard: True
   is_address: True

This YAML file will create two properties:

- "property1": an integer property defaulting to 4, displayed "Property 1" in the GUI.
- "property2": a string property defaulting to "a" displayed "Property 2" in the GUI.

If you want the custom property to appear in the dashboard, set ``add_to_dashboard`` to ``True`` in the YaML file.
The ``pretty_name`` is the name of the property in the web UI.

If you want the custom property to appear as a choice in the GoTTY Web SSH window (e.g if the property is a hostname or an IP address, and you want GoTTY to use it for SSH or Telnet), you can set ``is_address`` to True.

.. note:: You can find examples of YAML files with custom propertyes in :guilabel:`eNMS/tests/custom_properties`.

For eNMS to know where the file with custom properties is located on the server, 
you must set the ``custom_properties`` configuration variable to the path of the YAML file.
